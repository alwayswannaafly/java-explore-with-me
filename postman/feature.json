{
	"info": {
		"_postman_id": "0a5ff16b-cc3b-463d-8f7e-2280f8e02811",
		"name": "Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20371494"
	},
	"item": [
		{
			"name": "Add, Update, Delete Comment (own)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function getRandomEmail(prefix) {",
							"    const rand = Math.random().toString(36).substring(2, 8);",
							"    return `${prefix}-${rand}@test.com`;",
							"}",
							"",
							"function getRandomName(prefix) {",
							"    const rand = Math.floor(Math.random() * 10000);",
							"    return `${prefix} ${rand}`;",
							"}",
							"",
							"// Генерируем данные",
							"const userEmail = getRandomEmail();",
							"const categoryName = getRandomName();",
							"",
							"// 1. Создаём пользователя",
							"pm.sendRequest({",
							"    url: pm.variables.get('baseUrl') + '/admin/users',",
							"    method: 'POST',",
							"    header: { 'Content-Type': 'application/json' },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({ name: 'Test User', email: userEmail })",
							"    }",
							"}, (err, res) => {",
							"    if (err) {",
							"        console.log('User create failed:', err);",
							"        return;",
							"    }",
							"    const userId = res.json().id;",
							"    pm.variables.set('userId', userId);",
							"",
							"    // 2. Создаём категорию",
							"    pm.sendRequest({",
							"        url: pm.variables.get('baseUrl') + '/admin/categories',",
							"        method: 'POST',",
							"        header: { 'Content-Type': 'application/json' },",
							"        body: {",
							"            mode: 'raw',",
							"            raw: JSON.stringify({ name: categoryName })",
							"        }",
							"    }, (err2, res2) => {",
							"        if (err2) {",
							"            console.log('Category create failed:', err2);",
							"            return;",
							"        }",
							"        const catId = res2.json().id;",
							"        pm.variables.set('catId', catId);",
							"",
							"        // 3. Создаём и публикуем событие",
							"        const future = new Date();",
							"        future.setDate(future.getDate() + 7);",
							"        const eventDate = future.toISOString().replace('T', ' ').substring(0, 19);",
							"",
							"        pm.sendRequest({",
							"            url: pm.variables.get('baseUrl') + '/users/' + userId + '/events',",
							"            method: 'POST',",
							"            header: { 'Content-Type': 'application/json' },",
							"            body: {",
							"                mode: 'raw',",
							"                raw: JSON.stringify({",
							"                    title: 'Test Event for Comments',",
							"                    annotation: 'Annotation for comment test. Must be long enough.',",
							"                    description: 'Full description for comment test. Must be at least 20 chars long to pass validation.',",
							"                    eventDate: eventDate,",
							"                    location: { lat: 55.7558, lon: 37.6176 },",
							"                    category: catId,",
							"                    paid: false",
							"                })",
							"            }",
							"        }, (err3, res3) => {",
							"            if (err3) {",
							"                console.log('Event create failed:', err3);",
							"                return;",
							"            }",
							"            const eventId = res3.json().id;",
							"            pm.variables.set('eventId', eventId);",
							"",
							"            // 4. Публикуем событие",
							"            pm.sendRequest({",
							"                url: pm.variables.get('baseUrl') + '/admin/events/' + eventId,",
							"                method: 'PATCH',",
							"                header: { 'Content-Type': 'application/json' },",
							"                body: {",
							"                    mode: 'raw',",
							"                    raw: JSON.stringify({ stateAction: 'PUBLISH_EVENT' })",
							"                }",
							"            }, (err4, res4) => {",
							"                if (err4) {",
							"                    console.log('Publish failed:', err4);",
							"                } else {",
							"                    console.log('✅ Setup completed: user, category, event created and published.');",
							"                }",
							"            });",
							"        });",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате JSON\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const createResponse = pm.response.json();",
							"const createRequest = JSON.parse(pm.request.body.raw);",
							"",
							"pm.test(\"Комментарий должен содержать поля: id, text\", function () {",
							"    pm.expect(createResponse).to.have.property('id');",
							"    pm.expect(createResponse).to.have.property('text');",
							"});",
							"",
							"pm.test(\"Текст комментария должен совпадать с отправленным\", function () {",
							"    pm.expect(createResponse.text).to.eql(createRequest.text);",
							"});",
							"",
							"const commentId = createResponse.id;",
							"const baseUrl = pm.variables.get(\"baseUrl\");",
							"const userId = pm.variables.get(\"userId\");",
							"const eventId = pm.variables.get(\"eventId\");",
							"",
							"if (!commentId || !baseUrl || !userId || !eventId) {",
							"    pm.test(\"Ошибка: отсутствуют необходимые переменные\", () => {",
							"        pm.expect.fail(\"Не удалось получить commentId, userId, eventId или baseUrl\");",
							"    });",
							"    return;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: `${baseUrl}/users/${userId}/events/${eventId}/comments/${commentId}`,",
							"    method: 'PATCH',",
							"    header: { 'Content-Type': 'application/json' },",
							"    body: { mode: 'raw', raw: JSON.stringify({ text: 'Updated comment' }) }",
							"}, (err, res) => {",
							"    if (err) {",
							"        pm.test(\"Обновление комментария — сетевая ошибка\", () => pm.expect.fail(err.message));",
							"        return;",
							"    }",
							"",
							"    pm.test(\"Обновление комментария должно вернуть статус 200\", () => {",
							"        pm.expect(res.code).to.eql(200);",
							"    });",
							"",
							"    pm.test(\"Ответ на обновление должен быть в формате JSON\", () => {",
							"        pm.expect(res.headers.get('Content-Type')).to.include('application/json');",
							"    });",
							"",
							"    const updateResponse = res.json();",
							"    pm.test(\"Обновлённый комментарий содержит корректный текст и id\", () => {",
							"        pm.expect(updateResponse.text).to.eql('Updated comment');",
							"        pm.expect(updateResponse.id).to.eql(commentId);",
							"    });",
							"",
							"    pm.sendRequest({",
							"        url: `${baseUrl}/users/${userId}/events/${eventId}/comments/${commentId}`,",
							"        method: 'DELETE'",
							"    }, (err2, res2) => {",
							"        if (err2) {",
							"            pm.test(\"Удаление комментария — сетевая ошибка\", () => pm.expect.fail(err2.message));",
							"            return;",
							"        }",
							"",
							"        pm.test(\"Удаление комментария должно вернуть статус 204\", () => {",
							"            pm.expect(res2.code).to.eql(204);",
							"        });",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \"text\": \"Initial comment\" }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}",
						"events",
						"{{eventId}}",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Someone Else's Comment → 403",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Вспомогательные функции",
							"function randomEmail(prefix) {",
							"    const rand = Math.random().toString(36).substring(2, 8);",
							"    return `${prefix}-${rand}@test.com`;",
							"}",
							"",
							"function randomName(prefix) {",
							"    const rand = Math.floor(Math.random() * 10000);",
							"    return `${prefix} ${rand}`;",
							"}",
							"",
							"// Создаём автора",
							"pm.sendRequest({",
							"    url: pm.variables.get('baseUrl') + '/admin/users',",
							"    method: 'POST',",
							"    header: { 'Content-Type': 'application/json' },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            name: randomName('Author'),",
							"            email: randomEmail('author')",
							"        })",
							"    }",
							"}, (err, res) => {",
							"    if (err || res.code !== 201) {",
							"        console.log('Failed to create author:', res?.code, res?.text());",
							"        return;",
							"    }",
							"    const authorId = res.json().id;",
							"    pm.variables.set('authorId', authorId);",
							"",
							"    // Создаём хакера",
							"    pm.sendRequest({",
							"        url: pm.variables.get('baseUrl') + '/admin/users',",
							"        method: 'POST',",
							"        header: { 'Content-Type': 'application/json' },",
							"        body: {",
							"            mode: 'raw',",
							"            raw: JSON.stringify({",
							"                name: randomName('Hacker'),",
							"                email: randomEmail('hacker')",
							"            })",
							"        }",
							"    }, (err2, res2) => {",
							"        if (err2 || res2.code !== 201) {",
							"            console.log('Failed to create hacker:', res2?.code, res2?.text());",
							"            return;",
							"        }",
							"        const hackerId = res2.json().id;",
							"        pm.variables.set('hackerId', hackerId);",
							"",
							"        // Категория",
							"        pm.sendRequest({",
							"            url: pm.variables.get('baseUrl') + '/admin/categories',",
							"            method: 'POST',",
							"            header: { 'Content-Type': 'application/json' },",
							"            body: {",
							"                mode: 'raw',",
							"                raw: JSON.stringify({ name: randomName('Cat') })",
							"            }",
							"        }, (err3, res3) => {",
							"            if (err3 || res3.code !== 201) {",
							"                console.log('Failed to create category:', res3?.code, res3?.text());",
							"                return;",
							"            }",
							"            const catId = res3.json().id;",
							"",
							"            const future = new Date();",
							"            future.setDate(future.getDate() + 7);",
							"            const eventDate = future.toISOString().replace('T', ' ').substring(0, 19);",
							"",
							"            pm.sendRequest({",
							"                url: pm.variables.get('baseUrl') + '/users/' + authorId + '/events',",
							"                method: 'POST',",
							"                header: { 'Content-Type': 'application/json' },",
							"                body: {",
							"                    mode: 'raw',",
							"                    raw: JSON.stringify({",
							"                        title: 'Test Event for Comments',",
							"                        annotation: 'Annotation for comment test. Must be long enough.',",
							"                        description: 'Full description for comment test. Must be at least 20 chars long to pass validation.',",
							"                        eventDate: eventDate,",
							"                        location: { lat: 55.7558, lon: 37.6176 },",
							"                        category: catId,",
							"                        paid: false",
							"                    })",
							"                }",
							"            }, (err4, res4) => {",
							"                if (err4 || res4.code !== 201) {",
							"                    console.log('Failed to create event:', res4?.code, res4?.text());",
							"                    return;",
							"                }",
							"                const eventId = res4.json().id;",
							"                pm.variables.set('eventId', eventId);",
							"",
							"                // Публикуем событие",
							"                pm.sendRequest({",
							"                    url: pm.variables.get('baseUrl') + '/admin/events/' + eventId,",
							"                    method: 'PATCH',",
							"                    header: { 'Content-Type': 'application/json' },",
							"                    body: {",
							"                        mode: 'raw',",
							"                        raw: JSON.stringify({ stateAction: 'PUBLISH_EVENT' })",
							"                    }",
							"                }, (err5, res5) => {",
							"                    if (err5 || res5.code !== 200) {",
							"                        console.log('Failed to publish event:', res5?.code, res5?.text());",
							"                        return;",
							"                    }",
							"",
							"                    // Создаём комментарий от автора",
							"                    pm.sendRequest({",
							"                        url: pm.variables.get('baseUrl') + '/users/' + authorId + '/events/' + eventId + '/comments',",
							"                        method: 'POST',",
							"                        header: { 'Content-Type': 'application/json' },",
							"                        body: {",
							"                            mode: 'raw',",
							"                            raw: JSON.stringify({ text: 'My comment' })",
							"                        }",
							"                    }, (err6, res6) => {",
							"                        if (err6 || res6.code !== 201) {",
							"                            console.log('Failed to create comment:', res6?.code, res6?.text());",
							"                            return;",
							"                        }",
							"                        const commentId = res6.json().id;",
							"                        pm.variables.set('commentId', commentId);",
							"                    });",
							"                });",
							"            });",
							"        });",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {",
							"    pm.response.to.have.status(403);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \"text\": \"Hacked!\" }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{hackerId}}/events/{{eventId}}/comments/{{commentId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{hackerId}}",
						"events",
						"{{eventId}}",
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment on Unpublished Event → 409",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Вспомогательные функции для уникальных данных",
							"function randomEmail(prefix) {",
							"    const rand = Math.random().toString(36).substring(2, 8);",
							"    return `${prefix}-${rand}@test.com`;",
							"}",
							"",
							"function randomName(prefix) {",
							"    const rand = Math.floor(Math.random() * 10000);",
							"    return `${prefix} ${rand}`;",
							"}",
							"",
							"// 1. Создаём пользователя",
							"pm.sendRequest({",
							"    url: pm.variables.get('baseUrl') + '/admin/users',",
							"    method: 'POST',",
							"    header: { 'Content-Type': 'application/json' },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            name: randomName('User'),",
							"            email: randomEmail('user')",
							"        })",
							"    }",
							"}, (err, res) => {",
							"    if (err || res.code !== 201) {",
							"        console.log('Failed to create user:', res?.code, res?.text());",
							"        return;",
							"    }",
							"    const userId = res.json().id;",
							"    pm.variables.set('userId', userId);",
							"",
							"    // 2. Создаём категорию",
							"    pm.sendRequest({",
							"        url: pm.variables.get('baseUrl') + '/admin/categories',",
							"        method: 'POST',",
							"        header: { 'Content-Type': 'application/json' },",
							"        body: {",
							"            mode: 'raw',",
							"            raw: JSON.stringify({ name: randomName('Cat') })",
							"        }",
							"    }, (err2, res2) => {",
							"        if (err2 || res2.code !== 201) {",
							"            console.log('Failed to create category:', res2?.code, res2?.text());",
							"            return;",
							"        }",
							"        const catId = res2.json().id;",
							"",
							"        const future = new Date();",
							"        future.setDate(future.getDate() + 7);",
							"        const eventDate = future.toISOString().replace('T', ' ').substring(0, 19);",
							"",
							"        pm.sendRequest({",
							"            url: pm.variables.get('baseUrl') + '/users/' + userId + '/events',",
							"            method: 'POST',",
							"            header: { 'Content-Type': 'application/json' },",
							"            body: {",
							"                mode: 'raw',",
							"                raw: JSON.stringify({",
							"                    title: 'Unpublished Event for 409 Test',",
							"                    annotation: 'Annotation for comment test. Must be long enough.',",
							"                    description: 'Full description for comment test. Must be at least 20 chars long to pass validation.',",
							"                    eventDate: eventDate,",
							"                    location: { lat: 55.7558, lon: 37.6176 },",
							"                    category: catId,",
							"                    paid: false",
							"                })",
							"            }",
							"        }, (err3, res3) => {",
							"            if (err3 || res3.code !== 201) {",
							"                console.log('Failed to create unpublished event:', res3?.code, res3?.text());",
							"                return;",
							"            }",
							"            const eventId = res3.json().id;",
							"            pm.variables.set('eventId', eventId);",
							"            // Событие остаётся в состоянии \"PENDING\" (не публикуем!)",
							"        });",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \"text\": \"Comment on unpublished event\" }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}",
						"events",
						"{{eventId}}",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Comments",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Вспомогательные функции\r",
							"function randomEmail(prefix) {\r",
							"    return `${prefix}-${Math.random().toString(36).substring(2, 8)}@test.com`;\r",
							"}\r",
							"function randomName(prefix) {\r",
							"    return `${prefix} ${Math.floor(Math.random() * 10000)}`;\r",
							"}\r",
							"\r",
							"// 1. Создаём пользователя\r",
							"pm.sendRequest({\r",
							"    url: pm.variables.get('baseUrl') + '/admin/users',\r",
							"    method: 'POST',\r",
							"    header: { 'Content-Type': 'application/json' },\r",
							"    body: JSON.stringify({ name: randomName('User'), email: randomEmail('user') })\r",
							"}, (err, res) => {\r",
							"    if (err || res.code !== 201) return;\r",
							"    const userId = res.json().id;\r",
							"\r",
							"    // 2. Категория\r",
							"    pm.sendRequest({\r",
							"        url: pm.variables.get('baseUrl') + '/admin/categories',\r",
							"        method: 'POST',\r",
							"        header: { 'Content-Type': 'application/json' },\r",
							"        body: JSON.stringify({ name: randomName('Category') })\r",
							"    }, (err2, res2) => {\r",
							"        if (err2 || res2.code !== 201) return;\r",
							"        const catId = res2.json().id;\r",
							"\r",
							"        // 3. Событие\r",
							"        const future = new Date();\r",
							"        future.setDate(future.getDate() + 7);\r",
							"        const eventDate = future.toISOString().replace('T', ' ').substring(0, 19);\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: pm.variables.get('baseUrl') + '/users/' + userId + '/events',\r",
							"            method: 'POST',\r",
							"            header: { 'Content-Type': 'application/json' },\r",
							"            body: JSON.stringify({\r",
							"                title: 'Event for Public Comments Test',\r",
							"                annotation: 'Annotation for comment test. Must be long enough.',\r",
							"                description: 'Full description for comment test. Must be at least 20 chars long to pass validation.',\r",
							"                eventDate: eventDate,\r",
							"                location: { lat: 55.7558, lon: 37.6176 },\r",
							"                category: catId,\r",
							"                paid: false\r",
							"            })\r",
							"        }, (err3, res3) => {\r",
							"            if (err3 || res3.code !== 201) return;\r",
							"            const eventId = res3.json().id;\r",
							"\r",
							"            // 4. Публикуем\r",
							"            pm.sendRequest({\r",
							"                url: pm.variables.get('baseUrl') + '/admin/events/' + eventId,\r",
							"                method: 'PATCH',\r",
							"                header: { 'Content-Type': 'application/json' },\r",
							"                body: JSON.stringify({ stateAction: 'PUBLISH_EVENT' })\r",
							"            }, (err4, res4) => {\r",
							"                if (err4 || res4.code !== 200) return;\r",
							"\r",
							"                // 5. Создаём 2 комментария\r",
							"                let commentsCreated = 0;\r",
							"                const totalComments = 2;\r",
							"\r",
							"                function createComment(text) {\r",
							"                    pm.sendRequest({\r",
							"                        url: pm.variables.get('baseUrl') + '/users/' + userId + '/events/' + eventId + '/comments',\r",
							"                        method: 'POST',\r",
							"                        header: { 'Content-Type': 'application/json' },\r",
							"                        body: JSON.stringify({ text: text })\r",
							"                    }, (err5, res5) => {\r",
							"                        if (err5 || res5.code !== 201) return;\r",
							"                        commentsCreated++;\r",
							"                        if (commentsCreated === totalComments) {\r",
							"                            pm.variables.set('eventId', eventId);\r",
							"                        }\r",
							"                    });\r",
							"                }\r",
							"\r",
							"                createComment('First comment');\r",
							"                createComment('Second comment');\r",
							"            });\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате JSON\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен быть массивом\", function () {\r",
							"    pm.expect(Array.isArray(response)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"В ответе должно быть 2 комментария\", function () {\r",
							"    pm.expect(response).to.have.lengthOf(2);\r",
							"});\r",
							"\r",
							"// Проверяем структуру первого комментария\r",
							"if (response.length > 0) {\r",
							"    const comment = response[0];\r",
							"\r",
							"    pm.test(\"Каждый комментарий должен содержать поля: id, text, author, created\", function () {\r",
							"        pm.expect(comment).to.have.property('id');\r",
							"        pm.expect(comment).to.have.property('text');\r",
							"        pm.expect(comment).to.have.property('author');\r",
							"        pm.expect(comment).to.have.property('createdOn');\r",
							"    });\r",
							"\r",
							"    pm.test(\"Поле 'author' должно содержать подполя: id, name\", function () {\r",
							"        pm.expect(comment.author).to.have.property('id');\r",
							"        pm.expect(comment.author).to.have.property('name');\r",
							"    });\r",
							"\r",
							"    pm.test(\"Текст комментария не должен быть пустым\", function () {\r",
							"        pm.expect(comment.text).to.be.a('string').and.to.have.lengthOf.above(0);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/events/{{eventId}}/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"{{eventId}}",
						"comments"
					],
					"query": [
						{
							"key": "from",
							"value": "0",
							"disabled": true
						},
						{
							"key": "size",
							"value": "10",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}